@page "/baby"

<PageTitle>BabyLevelCalculator</PageTitle>

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Baby Level Calculator</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudForm>
        <MudCardContent>
            <MudTextField @bind-Value="motherLevel" Label="Mother Level"  Variant="Variant.Filled"/>
            <MudTextField @bind-Value="fatherLevel" Label="Father Level"  Variant="Variant.Filled"/>
            <br />
            <MudButton OnClick="HatchDino" Variant="Variant.Filled" Label="">Hatch!</MudButton>
        </MudCardContent>
    </MudForm>
</MudCard>
<br />

@if(messageList.Count > 0)
{
    <MudPaper>
        <MudChipSet Clickable="false">
            @foreach (string message in messageList.Take(3))
            {
                int index = messageList.IndexOf(message);
                Size size = index.Equals(0) ? Size.Large : Size.Small;
                bool isDisabled = index.Equals(0) ? false : true;
                <MudChip Icon="@Icons.Material.Filled.EggAlt" Text="@message" Size="@size" Disabled="isDisabled" />
            }
        </MudChipSet>
    </MudPaper>
}


@code {
    private int motherLevel;
    private int fatherLevel;
    private string? hatchMessage;
    private List<string> messageList = new();

    private void HatchDino()
    {
        if (motherLevel <= 0 || fatherLevel <= 0)
        {
            hatchMessage = "Parent levels must be higher than zero";
            return;
        }

        int dinoCount = GetDinoCount();

        int randRoll = Random.Shared.Next(1, 20);
        int level = randRoll switch
        {
            1              => Math.Min(motherLevel, fatherLevel) - 5,
            >= 2 and <= 19 => GetRandomLevel(motherLevel, fatherLevel),
            20             => Math.Max(motherLevel, fatherLevel) + 5,
            _              => throw new Exception()
        };

        string babyPlurality = $"bab{(dinoCount.Equals(1) ? "y" : "ies")}";
        int spawnLevel = (int)Math.Round(level / 1.5);
        hatchMessage = $"you had {dinoCount} {babyPlurality}, level {level}, spawn level {spawnLevel}!";
        messageList = messageList.Prepend(hatchMessage).ToList(); //prepending to list to ensure newest message appears on top
    }

    private int GetRandomLevel(int levelOne, int levelTwo) => 
        Random.Shared.Next(Math.Min(levelOne, levelTwo), Math.Max(levelOne, levelTwo));

    private int GetDinoCount()
    {
        int randRoll = Random.Shared.Next(1, 100);
        int result = randRoll switch
        {
            >= 1 and <= 3    => 3,
            >= 4 and <= 13   => 2,
            >= 14 and <= 100 => 1,
            _ => 0
        };

        return result;
    }
}
